/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ShopImport } from './routes/shop'
import { Route as RegisterImport } from './routes/register'
import { Route as ProfileImport } from './routes/profile'
import { Route as ProductsImport } from './routes/products'
import { Route as OrdersImport } from './routes/orders'
import { Route as LoginImport } from './routes/login'
import { Route as CategoryImport } from './routes/category'
import { Route as AnalyticsImport } from './routes/analytics'
import { Route as MainLayoutImport } from './routes/_mainLayout'
import { Route as IndexImport } from './routes/index'
import { Route as ShopIndexImport } from './routes/shop/index'
import { Route as ProfileIndexImport } from './routes/profile/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as OrdersIndexImport } from './routes/orders/index'
import { Route as CategoryIndexImport } from './routes/category/index'
import { Route as OrdersOrderIdImport } from './routes/orders/$orderId'

// Create/Update Routes

const ShopRoute = ShopImport.update({
  path: '/shop',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const ProductsRoute = ProductsImport.update({
  path: '/products',
  getParentRoute: () => rootRoute,
} as any)

const OrdersRoute = OrdersImport.update({
  path: '/orders',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CategoryRoute = CategoryImport.update({
  path: '/category',
  getParentRoute: () => rootRoute,
} as any)

const AnalyticsRoute = AnalyticsImport.update({
  path: '/analytics',
  getParentRoute: () => rootRoute,
} as any)

const MainLayoutRoute = MainLayoutImport.update({
  id: '/_mainLayout',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShopIndexRoute = ShopIndexImport.update({
  path: '/',
  getParentRoute: () => ShopRoute,
} as any)

const ProfileIndexRoute = ProfileIndexImport.update({
  path: '/',
  getParentRoute: () => ProfileRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  path: '/',
  getParentRoute: () => ProductsRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  path: '/',
  getParentRoute: () => OrdersRoute,
} as any)

const CategoryIndexRoute = CategoryIndexImport.update({
  path: '/',
  getParentRoute: () => CategoryRoute,
} as any)

const OrdersOrderIdRoute = OrdersOrderIdImport.update({
  path: '/$orderId',
  getParentRoute: () => OrdersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_mainLayout': {
      id: '/_mainLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainLayoutImport
      parentRoute: typeof rootRoute
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsImport
      parentRoute: typeof rootRoute
    }
    '/category': {
      id: '/category'
      path: '/category'
      fullPath: '/category'
      preLoaderRoute: typeof CategoryImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersImport
      parentRoute: typeof rootRoute
    }
    '/products': {
      id: '/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/shop': {
      id: '/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof ShopImport
      parentRoute: typeof rootRoute
    }
    '/orders/$orderId': {
      id: '/orders/$orderId'
      path: '/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof OrdersOrderIdImport
      parentRoute: typeof OrdersImport
    }
    '/category/': {
      id: '/category/'
      path: '/'
      fullPath: '/category/'
      preLoaderRoute: typeof CategoryIndexImport
      parentRoute: typeof CategoryImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/'
      fullPath: '/orders/'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof OrdersImport
    }
    '/products/': {
      id: '/products/'
      path: '/'
      fullPath: '/products/'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof ProductsImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexImport
      parentRoute: typeof ProfileImport
    }
    '/shop/': {
      id: '/shop/'
      path: '/'
      fullPath: '/shop/'
      preLoaderRoute: typeof ShopIndexImport
      parentRoute: typeof ShopImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  AnalyticsRoute,
  CategoryRoute: CategoryRoute.addChildren({ CategoryIndexRoute }),
  LoginRoute,
  OrdersRoute: OrdersRoute.addChildren({
    OrdersOrderIdRoute,
    OrdersIndexRoute,
  }),
  ProductsRoute: ProductsRoute.addChildren({ ProductsIndexRoute }),
  ProfileRoute: ProfileRoute.addChildren({ ProfileIndexRoute }),
  RegisterRoute,
  ShopRoute: ShopRoute.addChildren({ ShopIndexRoute }),
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_mainLayout",
        "/analytics",
        "/category",
        "/login",
        "/orders",
        "/products",
        "/profile",
        "/register",
        "/shop"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_mainLayout": {
      "filePath": "_mainLayout.tsx"
    },
    "/analytics": {
      "filePath": "analytics.tsx"
    },
    "/category": {
      "filePath": "category.tsx",
      "children": [
        "/category/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/orders": {
      "filePath": "orders.tsx",
      "children": [
        "/orders/$orderId",
        "/orders/"
      ]
    },
    "/products": {
      "filePath": "products.tsx",
      "children": [
        "/products/"
      ]
    },
    "/profile": {
      "filePath": "profile.tsx",
      "children": [
        "/profile/"
      ]
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/shop": {
      "filePath": "shop.tsx",
      "children": [
        "/shop/"
      ]
    },
    "/orders/$orderId": {
      "filePath": "orders/$orderId.tsx",
      "parent": "/orders"
    },
    "/category/": {
      "filePath": "category/index.tsx",
      "parent": "/category"
    },
    "/orders/": {
      "filePath": "orders/index.tsx",
      "parent": "/orders"
    },
    "/products/": {
      "filePath": "products/index.tsx",
      "parent": "/products"
    },
    "/profile/": {
      "filePath": "profile/index.tsx",
      "parent": "/profile"
    },
    "/shop/": {
      "filePath": "shop/index.tsx",
      "parent": "/shop"
    }
  }
}
ROUTE_MANIFEST_END */
